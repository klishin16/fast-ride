datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  email     String        @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  reviews   Review[]
  role      Role
  comments  Comment[]
  likes     CommentLike[]
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Review {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String?
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String      @default("cl1mo5hxv0021wvvr0op0tn5a")
  feature     Feature?
  estimation  Estimation?
  comments    Comment[]
  in_progress Boolean     @default(true)
}

model Feature {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  review         Review   @relation(fields: [reviewId], references: [id])
  reviewId       String   @unique
  topLeftLng     Int
  topLeftLat     Int
  bottomRightLnt Int
  bottomRightLat Int
  geometry       Json
  mapId          Int @default(autoincrement())
}

model Estimation {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  review          Review?  @relation(fields: [reviewId], references: [id])
  reviewId        String   @unique
  road_quality    Int      @default(0)
  travel_safety   Int      @default(0)
  road_congestion Int      @default(0)
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  text      String
  author    User?         @relation(fields: [authorId], references: [id])
  authorId  String?
  review    Review?       @relation(fields: [reviewId], references: [id])
  reviewId  String?
  likes     CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
}

enum Role {
  ADMIN
  USER
}
